{
    "fluig-paifilho-loop": {
        "scope": "javascript",
        "prefix": "fluig-paifilho-loop",
        "body": [
            "var indexes = form.getChildrenIndexes(\"$1\");",
            "",
            "for (var i = 0; i < indexes.length; ++i) {",
            "    form.getValue(\"$2___\" + indexes[i]);$0",
            "}",
            ""
        ],
        "description": "Percorre os itens de um Pai Filho em evento de Formulário (back-end)."
    },

    "fluig-paifilho-loop-workflow": {
        "scope": "javascript",
        "prefix": "fluig-paifilho-loop-workflow",
        "body": [
            "var indexes = hAPI.getChildrenIndexes(\"$1\");",
            "",
            "for (var i = 0; i < indexes.length; ++i) {",
            "    hAPI.getCardValue(\"$2___\" + indexes[i]);$0",
            "}",
            ""
        ],
        "description": "Percorre os itens de um Pai Filho em um evento de Processo (back-end)."
    },

    "fluig-function-data": {
        "scope": "javascript",
        "prefix": "fluig-function-data",
        "body": [
            "/**",
            " * Pega a data atual formatada",
            " *",
            " * Por padrão retorna o formato dd/MM/yyyy",
            " *",
            " * @param {string} format",
            " * @returns {string}",
            " */",
            "function pegaDataAtual(format) {",
            "    if (format == null || !format.length) {",
            "        format = \"dd/MM/yyyy\";",
            "    }",
            "",
            "    var data = java.time.LocalDateTime.now();",
            "    var formatter = java.time.format.DateTimeFormatter.ofPattern(format);",
            "    return data.format(formatter);",
            "}",
            "$0"
        ],
        "description": "Cria uma função que retorna a data atual formatada (back-end)."
    },

    "fluig-consulta-jdbc": {
        "scope": "javascript",
        "prefix": "fluig-consulta-jdbc",
        "body": [
            "",
            "var myQuery = \"$1\";",
            "",
            "try {",
            "    var dataSource = \"/jdbc/$2\";",
            "    var ic = new javax.naming.InitialContext();",
            "    var ds = ic.lookup(dataSource);",
            "    var conn = ds.getConnection();",
            "    var stmt = conn.createStatement();",
            "    var rs = stmt.executeQuery(myQuery);",
            "    var rsMeta = rs.getMetaData();",
            "    var columnCount = rsMeta.getColumnCount();",
            "    var i = 0;",
            "",
            "    // Preenchendo automaticamente o nome das colunas do dataset",
            "    for (i = 1; i <= columnCount; ++i) {",
            "        dataset.addColumn(rsMeta.getColumnName(i));",
            "    }",
            "",
            "    // Preenchendo o dataset",
            "    while (rs.next()) {",
            "        var row = [];",
            "        for (i = 1; i <= columnCount; ++i) {",
            "            row.push(rs.getString(i));",
            "        }",
            "        dataset.addRow(row);",
            "    }",
            "} catch (e) {",
            "    log.error(\"ERRO => \" + e.message);",
            "} finally {",
            "    if (rs != null) {",
            "        rs.close();",
            "    }",
            "    if (stmt != null) {",
            "        stmt.close();",
            "    }",
            "    if (conn != null) {",
            "        conn.close();",
            "    }",
            "}",
            ""
        ],
        "description": "Cria uma consulta direta ao Banco de Dados usando JDBC (back-end)."
    },

    "fluig-calendar": {
        "scope": "javascript",
        "prefix": "fluig-calendar",
        "body": [
            "FLUIGC.calendar(\"#$1\"$0);"
        ],
        "description": "Ativa o plugin de Data em um input text (front-end)."
    },

    "fluig-data-atual": {
        "scope": "javascript",
        "prefix": "fluig-data-atual",
        "body": [
            "moment().format(\"DD/MM/YYYY\")"
        ],
        "description": "Pega a data atual formatada em PT-BR (front-end)."
    },

    "fluig-beforeMovementOptions": {
        "scope": "javascript",
        "prefix": "fluig-beforeMovementOptions",
        "body": [
            "/**",
            " * Evento executado quando clica no botão Movimentar na tela de movimentações do Workflow",
            " *",
            " * @param {number} numState",
            " * @returns {boolean} True continua a movimentação, False cancela a movimentação",
            " * @throws {string} Mensagem de erro para cancelar a movimentação",
            " */",
            "function beforeMovementOptions(numState) {",
            "    $0",
            "}",
            ""
        ],
        "description": "Evento executado quando clica no botão Movimentar na tela de movimentações do Workflow (front-end)."
    },

    "fluig-beforeSendValidate": {
        "scope": "javascript",
        "prefix": "fluig-beforeSendValidate",
        "body": [
            "/**",
            " * Validação do formulário no front-end na tela de Processo",
            " *",
            " * Ocorre antes da solicitação ser movimentada, após já ter sido selecionada a atividade destino o usuário",
            " * e demais informações necessárias à solicitação.",
            " *",
            " * @param {number} numState",
            " * @param {number} nextState",
            " * @returns {boolean} True submete o formulário, False cancela o envio",
            " * @throws {string} Mensagem de erro para cancelar o envio do formulário",
            " */",
            "function beforeSendValidate(numState, nextState) {",
            "    $0",
            "}",
            ""
        ],
        "description": "Validação do formulário na tela de Processo do Workflow (front-end)."
    },

    "fluig-zoom-selected": {
        "scope": "javascript",
        "prefix": "fluig-zoom-selected",
        "body": [
            "/**",
            " * Função executada sempre que um campo Zoom tem um item selecionado",
            " *",
            " * Recebe um objeto com o Nome e Id do Zoom além de todos os campos",
            " * indicados para o Zoom retornar.",
            " *",
            " * @param {{inputName: string, inputId: string, selected: boolean}} selectedItem",
            " */",
            "function setSelectedZoomItem(selectedItem) {",
            "    $0",
            "}",
            ""
        ],
        "description": "Função executada quando um elemento é selecionado no Zoom (front-end)."
    },

    "fluig-zoom-removed": {
        "scope": "javascript",
        "prefix": "fluig-zoom-removed",
        "body": [
            "/**",
            " * Função executada sempre que um campo Zoom tem um item desmarcado",
            " *",
            " * Recebe um objeto com o Nome e Id do Zoom além de todos os campos",
            " * indicados para o Zoom retornar.",
            " *",
            " * @param {{inputName: string, inputId: string, selected: boolean}} removedItem",
            " */",
            "function removedZoomItem(removedItem) {",
            "    $0",
            "}",
            ""
        ],
        "description": "Função executada quando um elemento é desmarcado no Zoom (front-end)."
    },

    "fluig-dataset-async": {
        "prefix": "fluig-dataset-async",
        "body": [
            "let callback = {",
            "    success: function (data) {",
            "        if (data != undefined && data.values.length > 0) {",
            "            for (let i = 0; i < data.values.length; i++) {",
            "                $0",
            "            }",
            "        } else {",
            "            // Vazio",
            "        }",
            "    },",
            "    error: function (jqXHR, textStatus, errorThrown) {",
            "        // Erro",
            "    }",
            "};",
            "\n",
            "let c1 = DatasetFactory.createConstraint('${1:constraint}', '${2:initialValue}', '${3:finalValue}', ConstraintType.MUST);",
            "let constraints = [c1];",
            "let dataset = DatasetFactory.getDataset('${4:datasetName}', ${5:null}, constraints, null, callback);"
        ],
        "description": "Chamar Dataset de modo Assíncrono (front-end)."
    },

    "fluig-modal": {
        "prefix": "fluig-modal",
        "body": [
            "let myModal = FLUIGC.modal(",
            "    {",
            "        title: '${1:Título}',",
            "        content: '${2:Conteúdo}',",
            "        id: '${3:fluig-modal}',",
            "        actions: [",
            "            {",
            "                'label': '${3:Salvar}',",
            "                'bind': 'data-save',",
            "            },",
            "            {",
            "                'label': '${4:Fechar}',",
            "                'autoClose': true,",
            "            }",
            "        ]",
            "    },",
            "    function (err, data) {",
            "        if (err) {",
            "            // Tratar Erro",
            "        } else {",
            "            // Fazer algo com os dados (data)",
            "        }",
            "    }",
            ");"
        ],
        "description": "Criar modal do Fluig (front-end)"
    },

    "fluig-widget": {
        "prefix": "fluig-widget",
        "body": [
            "var ${1:MinhaWidget} = SuperWidget.extend((function () {",
            "",
            "    /**",
            "     * Elementos públicos da Widget",
            "     *",
            "     * Tudo que é declarado aqui é acessível pela variável da Widget",
            "     */",
            "    const widget = {",
            "",
            "        /**",
            "         * Eventos da Widget",
            "         */",
            "        bindings: {",
            "            local: {",
            "                \"save-settings\": [\"click_saveSettings\"]",
            "            },",
            "            global: {}",
            "        },",
            "",
            "        /**",
            "         * Método disparado automaticamente quando a Widget é iniciada",
            "         */",
            "        init: function () {",
            "            if (this.isEditMode) {",
            "                // Modo de Configuração",
            "            }",
            "",
            "            this.initWidgetElements();",
            "",
            "            // Exibe o Loading enquanto configura a widget",
            "            widgetElements.loading.show();",
            "",
            "            // Resto da programação de inicialização da widget",
            "            $0",
            "        },",
            "",
            "        /**",
            "         * Cria um \"cache\" dos elementos HTML da Widget",
            "         *",
            "         * O cache ajuda a não gastar processamento pesquisando itens no DOM",
            "         */",
            "        initWidgetElements: function () {",
            "            widgetElements.widget = this.DOM;",
            "            widgetElements.loading = FLUIGC.loading(window, {",
            "                textMessage: \"Processando Dados. Favor aguardar.\"",
            "            });",
            "        },",
            "",
            "        /**",
            "         * Salva as configurações da Widget na tela de edição",
            "         */",
            "        saveSettings: function () {",
            "            WCMSpaceAPI.PageService.UPDATEPREFERENCES(",
            "                {",
            "                    async: true,",
            "                    success: function(data) {",
            "                        FLUIGC.toast({",
            "                            message: data.message,",
            "                            type: \"success\"",
            "                        });",
            "                    },",
            "                    fail: function(xhr, message, errorData) {",
            "                        console.log(xhr, message, errorData);",
            "                        FLUIGC.toast({",
            "                            message: errorData.message,",
            "                            type: \"danger\"",
            "                        });",
            "                    }",
            "                },",
            "                this.instanceId,",
            "                {",
            "                    // Dados a enviar",
            "                }",
            "            );",
            "        },",
            "    };",
            "",
            "    /*",
            "     * Itens privados da Widget",
            "     * Nada a partir daqui é acessível pela variável da Widget",
            "     */",
            "",
            "    /**",
            "     * Elementos que compõem a Widget (cache de para performance)",
            "     */",
            "    const widgetElements = {",
            "",
            "        /**",
            "         * DIV da Widget",
            "         *",
            "         * @type {JQuery}",
            "         */",
            "        widget: null,",
            "",
            "        /**",
            "         * Tela de carregamento",
            "         *",
            "         * @type {Loading}",
            "         */",
            "        loading: null,",
            "    };",
            "",
            "    // Continuar a programação",
            "",
            "    return widget;",
            "})());"
        ],
        "description": "Criar o esqueleto de uma Widget (front-end)"
    }
}
