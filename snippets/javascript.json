{
    "fluig-paifilho-loop": {
        "scope": "javascript",
        "prefix": "fluig-paifilho-loop",
        "body": [
            "var indexes = form.getChildrenIndexes(\"$1\");",
            "",
            "for (var i = 0; i < indexes.length; ++i) {",
            "    form.getValue(\"$2___\" + indexes[i]);$0",
            "}",
            ""
        ],
        "description": "Percorre os itens de um Pai Filho (back-end)."
    },

    "fluig-function-data": {
        "scope": "javascript",
        "prefix": "fluig-function-data",
        "body": [
            "/**",
            " * Pega a data atual formatada",
            " *",
            " * Por padrão retorna o formato dd/MM/yyyy",
            " *",
            " * @param {string} format",
            " * @returns {string}",
            " */",
            "function pegaDataAtual(format) {",
            "    if (format == null || !format.length) {",
            "        format = \"dd/MM/yyyy\";",
            "    }",
            "",
            "    var data = java.time.LocalDateTime.now();",
            "    var formatter = java.time.format.DateTimeFormatter.ofPattern(format);",
            "    return data.format(formatter);",
            "}",
            "$0"
        ],
        "description": "Cria uma função que retorna a data atual formatada (back-end)."
    },

    "fluig-consulta-jdbc": {
        "scope": "javascript",
        "prefix": "fluig-consulta-jdbc",
        "body": [
            "",
            "var myQuery = \"$1\";",
            "",
            "try {",
            "    var dataSource = \"/jdbc/$2\";",
            "    var ic = new javax.naming.InitialContext();",
            "    var ds = ic.lookup(dataSource);",
            "    var conn = ds.getConnection();",
            "    var stmt = conn.createStatement();",
            "    var rs = stmt.executeQuery(myQuery);",
            "    var rsMeta = rs.getMetaData();",
            "    var columnCount = rsMeta.getColumnCount();",
            "    var i = 0;",
            "",
            "    // Preenchendo automaticamente o nome das colunas do dataset",
            "    for (i = 1; i <= columnCount; ++i) {",
            "        dataset.addColumn(rsMeta.getColumnName(i));",
            "    }",
            "",
            "    // Preenchendo o dataset",
            "    while (rs.next()) {",
            "        var row = [];",
            "        for (i = 1; i <= columnCount; ++i) {",
            "            row.push(rs.getString(i));",
            "        }",
            "        dataset.addRow(row);",
            "    }",
            "} catch (e) {",
            "    log.error(\"ERRO => \" + e.message);",
            "} finally {",
            "    if (rs != null) {",
            "        rs.close();",
            "    }",
            "    if (stmt != null) {",
            "        stmt.close();",
            "    }",
            "    if (conn != null) {",
            "        conn.close();",
            "    }",
            "}",
            ""
        ],
        "description": "Cria uma consulta direta ao Banco de Dados usando JDBC (back-end)."
    },

    "fluig-calendar": {
        "scope": "javascript",
        "prefix": "fluig-calendar",
        "body": [
            "FLUIGC.calendar(\"#$1\"$0);"
        ],
        "description": "Ativa o plugin de Data em um input text (front-end)."
    },

    "fluig-data-atual": {
        "scope": "javascript",
        "prefix": "fluig-data-atual",
        "body": [
            "moment().format(\"DD/MM/YYYY\")"
        ],
        "description": "Pega a data atual formatada em PT-BR (front-end)."
    },

    "fluig-beforeMovementOptions": {
        "scope": "javascript",
        "prefix": "fluig-beforeMovementOptions",
        "body": [
            "/**",
            " * Evento executado quando clica no botão Movimentar na tela de movimentações do Workflow",
            " *",
            " * @param {number} numState",
            " * @returns {boolean} True continua a movimentação, False cancela a movimentação",
            " * @throws {string} Mensagem de erro para cancelar a movimentação",
            " */",
            "function beforeMovementOptions(numState) {",
            "    $0",
            "}",
            ""
        ],
        "description": "Evento executado quando clica no botão Movimentar na tela de movimentações do Workflow (front-end)."
    },

    "fluig-beforeSendValidate": {
        "scope": "javascript",
        "prefix": "fluig-beforeSendValidate",
        "body": [
            "/**",
            " * Validação do formulário no front-end na tela de Processo",
            " *",
            " * Ocorre antes da solicitação ser movimentada, após já ter sido selecionada a atividade destino o usuário",
            " * e demais informações necessárias à solicitação.",
            " *",
            " * @param {number} numState",
            " * @param {number} nextState",
            " * @returns {boolean} True submete o formulário, False cancela o envio",
            " * @throws {string} Mensagem de erro para cancelar o envio do formulário",
            " */",
            "function beforeSendValidate(numState, nextState) {",
            "    $0",
            "}",
            ""
        ],
        "description": "Validação do formulário na tela de Processo do Workflow (front-end)."
    },

    "fluig-zoom-selected": {
        "scope": "javascript",
        "prefix": "fluig-zoom-selected",
        "body": [
            "/**",
            " * Função executada sempre que um campo Zoom tem um item selecionado",
            " *",
            " * Recebe um objeto com o Nome e Id do Zoom além de todos os campos",
            " * indicados para o Zoom retornar.",
            " *",
            " * @param {{inputName: string, inputId: string, selected: boolean}} selectedItem",
            " */",
            "function setSelectedZoomItem(selectedItem) {",
            "    $0",
            "}",
            ""
        ],
        "description": "Função executada quando um elemento é selecionado no Zoom (front-end)."
    },

    "fluig-zoom-removed": {
        "scope": "javascript",
        "prefix": "fluig-zoom-removed",
        "body": [
            "/**",
            " * Função executada sempre que um campo Zoom tem um item desmarcado",
            " *",
            " * Recebe um objeto com o Nome e Id do Zoom além de todos os campos",
            " * indicados para o Zoom retornar.",
            " *",
            " * @param {{inputName: string, inputId: string, selected: boolean}} removedItem",
            " */",
            "function removedZoomItem(removedItem) {",
            "    $0",
            "}",
            ""
        ],
        "description": "Função executada quando um elemento é desmarcado no Zoom (front-end)."
    }
}
